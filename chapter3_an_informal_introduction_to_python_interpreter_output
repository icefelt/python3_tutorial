quit
quit()
help
help()
modules
keywords
symbols
topics
exit
the_world_is_flat = True
if the_world_is_flat:
    print("Be careful not to fall off!")
exit ()
quit()
exit
exit()
hello
exit()
    print("Be careful not to fall off!")

import sys
help
help()
topics
strings
STRINGS
quit
the_world_is_flat = True
if the_world_is_flat:
    print("Be careful not to fall off!")
2 + 2
2+2
2*3
2X3
50 - 5*6
(50 - 5*6) / 4
8/5
998/12.9888
17 / 3
17 // 3
17 % 3
5 * 3 + 2
5 ** 2
2 ** 7 # 2 to the power of 7
width = 20
height = 5 * 9
width * height
width / height
width // height
height / width
height // width
n # try to access undefined variable
4 * 3.75 - 1
print _
print(_)
tax = 12.5 / 100
price = 100.50
price * tax
price + _
round(_,2)
'spam eggs' # single quotes
'doesn\'t' # use \' to escae the single quote...
"doesn't"
'"Yes," they said.'
"\"Yes,\" they said."
'"Isn\'t," they said.'
print _
print(_)
'"Isn\'t," they said.'
print('"Isn\'t," they said.')
s = 'First line.\nSecond line.'
s
print(s)
print('C:\some\name') # \n means newline
print(r'C:\some\name') # showing the r before the quote
print("""\
Usage: thingy [OPTIONS]
    -h                                Display this usage message
    -H hostname                       Hostname to connect to
""")
# 3 times 'un', followed by 'ium'
3 * 'un' + 'ium'
8 * 'un' + 'ium'
'Py' + 'thon'
text = ('Put several strings within parenthesis '
        'to have them joined together.')
text
prefix = 'Py'
prefix 'thon'
('un' * 3) 'ium'
prefix + 'thon'
word = 'Python'
word[0]
word [5]
word [3]
word[-1]
word[-2]
word[-6]
word[0:2]
word[2:5]
word[2:9]
word[-2:9]
word[:2]
word[2:]
word[2:] + word[:2]
word[:2] + word[2:]
word[:2]
word[4:]
word[-2:]
word[-1]
word[42]
word[4:42]
word[42:]
word[0] = 'J'
word[2:] = 'py'
'J' + word[1:]
word[:2] + 'py'
s = 'supercalifragilisticexpialidociousnessiscooooooool'
len(s)
squares = [1, 4, 9, 16, 25]
squares
squares[0] # indexing returns the item
squares[-1]
squares 
squares[-3:] # slicing returns a new list 
squares[:]
squares + [36, 49, 64, 81, 100]
cubes = [1, 8, 27, 65, 125] # the last cube is not correct
4 ** 3 # the cube of 4 is 64, not 65
cubes[3] = 64 # replace the incorrect value
cubes
cubes[:]
cubes.append(216) # add the cube of 6
cubes.append(7 ** 3) # add the cube of 7
cubes
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
letters
# replace some values of the letters enetered above
letters[2:5] = ['C', 'D', 'E']
letters
# now remove them
letters[2:5] = []
letters
# clear the list by replacing all the elements with an empty list
letters[:] = []
letters
letters = ['a', 'b', 'c', 'd']
len(letters)
a = ['a', 'b', 'c']
n = [1, 2, 3]
x = [a,n]
x
x[0]
x[0,1]]
x[0,1]
x[0][1]
# Fibonacci series: 
# the sum of two elements defines the next
a, b = 0, 1
while a < 10;
while a < 10:
    print(a)
    a, b = b, a+b
while a < 100:
i = 256*256
print('The value of i is', i)
a, b = 0, 1
while a < 1000:
    print(a, end=',')
    a, b = b, a+b
quit
